fragment Role on Role {
  id
  name
  key
  schema
}

fragment UserRole on UserRole {
  id
  roleId
  role {
    ...Role
  }
  userId
}

fragment User on User {
  id
  email
  firstName
  lastName
  displayName
  data
  avatarUrl
  kratosId
  supabaseUserId
  userRoleCollection {
    edges {
      node {
        ...UserRole
      }
    }
  }
  firstResponderCollection{
    edges{
      node{
        ...FirstResponder
      }
    }
  }
  primaryOrganizationId
  primaryOrganization{
    ...Organization
  }
  userOrganizationCollection{
    edges{
      node{
        ...Organization
      }
    }
    pageInfo{
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}

query UserCollection(
  $first: Int
  $last: Int
  $before: Cursor
  $after: Cursor
  $filter: UserFilter
  $orderBy: [UserOrderBy!]
) {
  userCollection(first: $first, last: $last, before: $before, after: $after, filter: $filter, orderBy: $orderBy) {
    edges {
      node {
       ...User
      }
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}

query User($id: UUID!) {
  userCollection(filter: { id: { eq: $id } } ) {
    edges {
      node {
        ...User
      }
    }
  }
}

mutation CreateUser($input: UserInsertInput!) {
  insertIntoUserCollection(objects: [$input]) {
    records {
      ...User
    }
  }
}

mutation UpdateUser($id: UUID!, $user: UserUpdateInput!) {
  updateUserCollection(
    filter: {
      id: { eq: $id }
    }
    set: $user
  ) {
    records {
      ...User
    }
    affectedCount
  }
}
